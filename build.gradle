plugins {
    id 'application'
    id 'io.freefair.lombok' version '8.6'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
    id 'idea'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

apply from: 'generate-plugins.gradle'

tasks.named('shadowJar') {
    enabled = false
}

// Create a resolvable configuration just for running microbot
configurations {
    microbotRuntime {
        canBeConsumed = false
        canBeResolved = true
    }

    pluginShadowClasspath {
        extendsFrom runtimeClasspath
        exclude group: 'net.runelite', module: 'microbot'
    }
}

repositories {
    maven {
        url = 'https://nexus.microbot.cloud/repository/microbot-nightly/'
    }
    mavenCentral()
}

dependencies {
    compileOnly 'com.microbot:client:+'
    microbotRuntime 'com.microbot:client:+'

    // Add Microbot client dependency for tests
    testImplementation 'com.microbot:client:+'
}

application {
    // Replace this with the actual main class inside your shaded jar
    mainClass = 'net.runelite.client.RuneLite'
}


// Plugin Logic

String pluginVersionFromPluginJson(File pluginDir) {
    def pluginJavaFile = pluginDir.listFiles()?.find { it.name.endsWith("Plugin.java") }
    if (pluginJavaFile == null) {
        throw new GradleException("No *Plugin.java found in: $pluginDir")
    }
    def info = ext.getPluginDescriptorInfo(pluginJavaFile) as Map  // ext == project.ext
    return info.version as String
}

def pluginsDir = file('src/main/java/net/runelite/client/plugins/microbot')
def pluginDirs = pluginsDir.listFiles()?.findAll { it.isDirectory() } ?: []

println "Detected plugins: " + pluginDirs*.name

def pluginsProperty = project.findProperty("pluginList")
def selectedPlugins = pluginsProperty ? pluginsProperty.split(',').collect { it.trim() } : []

// Collect all publications to create later
def pluginPublications = []

// Create a sourceSet + ShadowJar per plugin
pluginDirs.each { pluginDir ->
    def pluginJavaFile = pluginDir.listFiles()?.find { file -> file.name.endsWith("Plugin.java") }

    if (!pluginJavaFile) {
        println "⚠️ No Plugin.java file found in ${pluginDir.name}"
        return
    }

    def pluginName = pluginJavaFile.name - '.java'
    println "Found plugin class: ${pluginJavaFile.name}"

    if (selectedPlugins && !selectedPlugins.contains(pluginName)) {
        println "Skipping plugin: $pluginName"
        return
    }

    // Create a dependencySet for each plugin
    def pluginConfigName = "${pluginName}ShadowDeps"
    configurations.create(pluginConfigName) {
        extendsFrom configurations.pluginShadowClasspath
    }

    def depsFile = new File(pluginDir as File, "dependencies.txt")
    if (depsFile.exists()) {
        depsFile.readLines().each { dep ->
            println("dep " + dep.trim())
            dependencies.add(pluginConfigName, dep.trim())
        }
    }

    // Create a ShadowJar task for each plugin
    def jarTask = tasks.register("${pluginName}Jar", ShadowJar) {
        from(sourceSets.main.output) {
            def pluginRelativePath = sourceSets.main.java.srcDirs.find { srcDir ->
                pluginDir.absolutePath.startsWith(srcDir.absolutePath)
            }

            if (pluginRelativePath) {
                def relativePath = pluginRelativePath.toPath().relativize(pluginDir.toPath()).toString().replace('\\', '/')
                include "${relativePath}/**"
                println "Including classes from path: ${relativePath}/**"
            } else {
                include "**/${pluginName}/**"
                include "**/${pluginName}.class"
                include "**/${pluginName}Plugin.class"
                println "Using fallback include pattern for plugin: ${pluginName}"
            }

            include "**/microbot/PluginConstants.class"
            println "Including shared PluginConstants class"
        }

        archiveFileName.set("${pluginName}-${pluginVersionFromPluginJson(pluginDir)}.jar")
        archiveBaseName.set(pluginName)
        archiveVersion.set(pluginVersionFromPluginJson(pluginDir as File))
        archiveClassifier.set('')
        configurations = [project.configurations.getByName(pluginConfigName)]
        destinationDirectory.set(layout.buildDirectory.dir("libs"))

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        // Exclude module-info.class entirely (you don't need modules for plugins)
        exclude 'module-info.class'
        exclude 'META-INF/versions/**'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        exclude '**/module-info.class'
        exclude '**/plugins.json'
        outputs.upToDateWhen { false }
    }

    tasks.named("build") {
        dependsOn(jarTask)
    }

    pluginPublications << [
            name       : pluginName,
            jarTask    : jarTask,
            version    : pluginVersionFromPluginJson(pluginDir)
    ]
}

publishing {
    publications {
        pluginPublications.each { pub ->
            create("${pub.name}Publication", MavenPublication) {
                groupId = "net.runelite.client.plugins.microbot"
                artifactId = pub.name.toLowerCase()
                version = pub.version

                artifact(pub.jarTask.get().archiveFile) {
                    extension "jar"
                }
            }
        }
    }
    repositories {
        maven {
            name = "microbot-plugins"
            url = uri("https://nexus.microbot.cloud/repository/microbot-plugins/")
            credentials {
                username = project.findProperty("nexusUsername") ?: ""
                password = project.findProperty("nexusPassword") ?: ""
            }
        }
    }
}

tasks.withType(Jar).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    // Set Unix permissions consistently
    eachFile { fileCopyDetails ->
        fileCopyDetails.mode = 0644 // rw-r--r--
    }
}

tasks.register("copyPluginDocs") {
    group = "documentation"
    description = "Copies plugin README.md files and resources to the public directory for GitHub Pages"

    doLast {
        def publicDir = file("public/docs")
        publicDir.mkdirs()

        pluginDirs.each { pluginDir ->
            def pluginName = ""
            def pluginDirName = pluginDir.name

            def pluginJavaFile = pluginDir.listFiles()?.find { file ->
                file.name.endsWith("Plugin.java")
            }

            if (pluginJavaFile) {
                pluginName = pluginJavaFile.name - '.java'
                println "Found plugin class: ${pluginJavaFile.name}"
            } else {
                println "⚠️ No Plugin.java file found in $pluginName"
                return
            }

            def docsDir = new File("src/main/resources/net/runelite/client/plugins/microbot/${pluginDirName}/docs")
            def assetsSourceDir = new File(docsDir, "assets")
            def readmeFile = null

            if (docsDir.exists() && docsDir.isDirectory()) {
                readmeFile = docsDir.listFiles()?.find { file ->
                    file.name.toLowerCase() == "readme.md"
                }

                def pluginDocsDir = new File(publicDir, pluginName)
                pluginDocsDir.mkdirs()

                if (readmeFile && readmeFile.exists()) {
                    copy {
                        from readmeFile
                        into pluginDocsDir
                    }
                    println "✅ Copied ${readmeFile.name} for plugin: ${pluginName}"
                } else {
                    println "⚠️ No README.md found in docs folder for plugin: ${pluginName}"
                }

                if (assetsSourceDir.exists() && assetsSourceDir.isDirectory()) {
                    def assetsDestDir = new File(pluginDocsDir, "assets")
                    copy {
                        from assetsSourceDir
                        into assetsDestDir
                    }
                    println "✅ Copied assets for plugin: ${pluginName}"
                } else {
                    println "ℹ️ No assets folder found for plugin: ${pluginName}"
                }
            } else {
                println "⚠️ No docs folder found at: ${docsDir.absolutePath}"
            }
        }
    }
}


tasks.named("build") {
    finalizedBy("generatePluginsJson")
    finalizedBy("copyPluginDocs")
}