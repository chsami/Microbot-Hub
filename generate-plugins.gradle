// generate-plugins.gradle

import groovy.json.JsonOutput
import java.security.MessageDigest


def pluginRoot = file("src/main/java/net/runelite/client/plugins/microbot")
def outputJson = file("public/docs/plugins.json")
def jarOutputDir = file("$buildDir/libs")

def computeSHA256 = { File file ->
    MessageDigest digest = MessageDigest.getInstance("SHA-256");
    byte[] hash = digest.digest(file.bytes);

    StringBuilder hexString = new StringBuilder();
    for (byte b : hash)
    {
        String hex = Integer.toHexString(0xff & b);
        if (hex.length() == 1)
        {
            hexString.append('0');
        }
        hexString.append(hex);
    }

    return hexString.toString();
}

ext {
    getPluginDescriptorInfo = { File javaFile ->
        def content = javaFile.getText('UTF-8')
        def descriptor = [:]

        def nameMatcher = content =~ /name\s*=\s*(?:[\w$.]+\s*\+\s*)?"([^"]+)"/
        def descMatcher     = content =~ /description\s*=\s*"([^"]+)"/
        def tagsMatcher     = content =~ /tags\s*=\s*\{([^}]+)\}/
        def authorMatcher   = content =~ /author\s*=\s*"([^"]+)"/
        def iconUrlMatcher  = content =~ /iconUrl\s*=\s*"([^"]+)"/
        def versionMatcher  = content =~ /version\s*=\s*"([^"]+)"/
        def minClientVersionMatcher  = content =~ /minClientVersion\s*=\s*"([^"]+)"/

        if (nameMatcher.find())    descriptor.name = nameMatcher.group(1)
        if (descMatcher.find())    descriptor.description = descMatcher.group(1)
        if (tagsMatcher.find())    descriptor.tags = tagsMatcher.group(1).split(',').collect { it.trim().replaceAll('"','') }
        descriptor.author  = authorMatcher.find()  ? authorMatcher.group(1) : 'Unknown Author'
        descriptor.iconUrl = iconUrlMatcher.find() ? iconUrlMatcher.group(1) : ''
        descriptor.version = versionMatcher.find() ? versionMatcher.group(1) : '1.0.0'
        descriptor.minClientVersion = minClientVersionMatcher.find() ? minClientVersionMatcher.group(1) : '1.0.0'

        descriptor  // last expression returned
    }
}



tasks.register("generatePluginsJson") {
    group = "build"
    description = "Generates plugins.json by scanning plugin folders and hashing JARs"

    doLast {
        def plugins = []

        pluginRoot.eachDir { pluginDir ->
            def pluginName = ""

            def pluginJavaFile = pluginDir.listFiles()?.find { file ->
                file.name.endsWith("Plugin.java")
            }

            if (pluginJavaFile) {
                pluginName = pluginJavaFile.name[0..-6] // removes '.java'
                println "Found plugin class: ${pluginJavaFile.name}"
            } else {
                println "⚠️ No Plugin.java file found in $pluginName"
            }

            try {
                def parsed = [:]
                def descriptorInfo = getPluginDescriptorInfo(pluginJavaFile)

                print "Parsing " + pluginName + " - (" + descriptorInfo.name + ")"

                // Set basic plugin info from descriptor
                parsed.internalName = pluginName
                parsed.name = descriptorInfo.name
                parsed.description = descriptorInfo.description
                parsed.tags = descriptorInfo.tags
                parsed.version = descriptorInfo.version
                parsed.minClientVersion =  descriptorInfo.minClientVersion // Set default or make configurable
                parsed.author = descriptorInfo.author  // Set default or make configurable
                parsed.supportUrl = "https://github.com/chsami/microbot" // Set default or make configurable
                parsed.iconUrl = descriptorInfo.iconUrl
                // Add SHA256
                parsed.sha256 = computeSHA256(new File(jarOutputDir, "${pluginName}-${descriptorInfo.version}.jar"))

                // Add Nexus URL
                def pluginVersion = parsed.version
                def pluginId = parsed.id ?: pluginName  // fallback to folder name
                def nexusBase = "https://nexus.microbot.cloud/repository/microbot-plugins"
                parsed["url"] = "${nexusBase}/net/runelite/client/plugins/microbot/${pluginId.toLowerCase()}/${pluginVersion}/${pluginId.toLowerCase()}-${pluginVersion}.jar"

                plugins << parsed

                println "✅ Plugin ${pluginName} processed successfully"

            } catch (e) {
                logger.warn("⚠️ Error reading ${pluginName}: ${e.message}")
            }
        }

        outputJson.parentFile.mkdirs()
        outputJson.text = JsonOutput.prettyPrint(JsonOutput.toJson(plugins))
        println "✅ Generated plugins.json with ${plugins.size()} plugins"
    }
}
